// By using unordered_map  : 
#include<bits/stdc++.h>         // T.C : O(n)
using namespace std;            // S.C : O(n)

int main(){

    int t;
    cin >> t;

    while(t--){
        int n;
        cin >> n;
        int arr[n];
        
        for(int i = 0;i<n;i++){
            cin >> arr[i];
        }
        unordered_map<int,int> m;
        for(int i = 0;i<n;i++){
            m[arr[i]]++;
        }
        int val = n/2;
        for(auto x:m){
            if(x.second>val)
            cout<<x.first;
        }
    }

    return -1;
}

OR
#include<bits/stdc++.h>         // T.C : O(n)
using namespace std;            // S.C : O(1)

int majorityElement(int a[], int size)
{
    
    int ma = a[0];
    int count = 1;
    for(int i=0;i<size;i++){
        if(a[i] == ma) count++;
        else
        count--;
        if(count ==0){
            ma = a[i];
            count = 1;
        }
    }
    int c = 0;
    for(int i=0;i<size;i++){
        if(a[i] == ma) c++;
    }
    if(c > size/2) return ma;
    else return -1;
    
}

int main(){

    int t;
    cin >> t;

    while(t--){
        int n;
        cin >> n;
        int arr[n];
        
        for(int i = 0;i<n;i++){
            cin >> arr[i];
        }
        
        cout << majorityElement(arr, n) << endl;
    }

    return 0;
}
